@{
    /**/

    ViewBag.Title = "成绩中心";
}
@using Microsoft.AspNet.Identity;
@using HOPU.Models
@model GetUserType
<link href="~/Content/bootstrap-editable.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-editable.js"><</script>
<link href="~/Content/bootstrap-table.css" rel="stylesheet" />
<script src="~/Scripts/BTTable/bootstrap-table.js"></script>
<script src="~/Scripts/BTTable/bootstrap-table-zh-CN.js"></script>
<script src="~/Scripts/BTTable/bootstrap-table-editable.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script src="~/Scripts/bootstrap-datepicker.zh-CN.js"></script>
<div class="page-title row text-center">
    <h2>@ViewBag.Title</h2>
</div>
<div>
    <ul class="breadcrumb" style="width:300px">
        <li><a href="~/SysHome/Home">首页</a></li>
        <li class="active">测试中心</li>
        <li><a href="~/Syshome/UnifiedTestType">统测列表</a></li>
        <li class="active">@ViewBag.Title</li>
    </ul>
</div>
@if (GetUserType.GetUserTypeInfo(User.Identity.GetUserId()))//如果是admin
{
    <div>
        <input type="hidden" id="UtId" value="@ViewBag.UtId" />
    </div>
    <div>
        @Html.DropDownList("BrickType", ViewBag.UtIdList as IEnumerable<SelectListItem>, new { @class = "btn btn-default btn-sm" })
        <table id="ScoreTable"></table>
    </div>
    <script>
        $(function () {
            $("#ScoreTable").bootstrapTable({
                method: "post",
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: true,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: 1,                       //初始化加载第一页，默认第一页
                pageSize: 10,                       //每页的记录行数（*）
                pageList: [5, 10, 25, 50, 100],        //可供选择的每页的行数（*）
                search: true,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
                strictSearch: true,
                showColumns: true,                  //是否显示所有的列
                showRefresh: true,                  //是否显示刷新按钮
                minimumCountColumns: 2,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
                //height: 600,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "Score",                     //每一行的唯一标识，一般为主键列
                showToggle: true,                    //是否显示详细视图和列表视图的切换按钮
                cardView: false,                    //是否显示详细视图
                detailView: false,
                queryParams: queryParams,//传递参数（*）
                //是否显示父子表
                url: "../SysHome/AdminGetScore",
                columns: [
                    //{
                    //field: 'Id', // 返回json数据中的name
                    //title: 'ID' // 表格表头显示文字
                    //},
                    {
                        field: 'UtId',
                        title: '统测号',

                    }, {
                        field: 'UserName',
                        title: '姓名(学号)',
                    }, {
                        field: 'EndTime',
                        title: "提交时间",
                        formatter: function (value, row, index) {
                            return changeDateFormat(value)
                        }
                    }, {
                        field: "Score",
                        title: "分数",
                    }],
            });


            //得到查询的参数
            function queryParams(params) {
                var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
                    limit: params.limit,   //页面大小
                    offset: params.offset,  //页码
                    UtId: $("#UtId").val()
                    //statu: $("#txt_search_statu").val()
                };
                return temp;
            };
            //return oTableInit;
        });



    function changeDateFormat(cellval) {
        if (cellval != null) {
            var date = new Date(parseInt(cellval.replace("/Date(", "").replace(")/", ""), 10));
            var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
            var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
            return date.getFullYear() + "-" + month + "-" + currentDate;
        }
    }
    </script>
}
